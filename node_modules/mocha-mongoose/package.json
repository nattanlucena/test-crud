{
  "_args": [
    [
      {
        "raw": "mocha-mongoose@^1.2.0",
        "scope": null,
        "escapedName": "mocha-mongoose",
        "name": "mocha-mongoose",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/home/ericke/Documentos/Projeto Arima Teste/test-crud"
    ]
  ],
  "_from": "mocha-mongoose@>=1.2.0 <2.0.0",
  "_id": "mocha-mongoose@1.2.0",
  "_inCache": true,
  "_location": "/mocha-mongoose",
  "_nodeVersion": "4.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mocha-mongoose-1.2.0.tgz_1458174968172_0.6734547594096512"
  },
  "_npmUser": {
    "name": "elliotf",
    "email": "efoster@firetaco.com"
  },
  "_npmVersion": "2.14.20",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mocha-mongoose@^1.2.0",
    "scope": null,
    "escapedName": "mocha-mongoose",
    "name": "mocha-mongoose",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mocha-mongoose/-/mocha-mongoose-1.2.0.tgz",
  "_shasum": "d07066262668864c304e348b1670bc52ba25cdf3",
  "_shrinkwrap": null,
  "_spec": "mocha-mongoose@^1.2.0",
  "_where": "/home/ericke/Documentos/Projeto Arima Teste/test-crud",
  "author": {
    "name": "Elliot Foster",
    "email": "github@firetaco.com"
  },
  "bugs": {
    "url": "https://github.com/elliotf/mocha-mongoose/issues"
  },
  "dependencies": {},
  "description": "Test helpers for using mongodb with mocha",
  "devDependencies": {
    "chai": ">=1.0.0",
    "mocha": ">= 1.0.0",
    "mongodb": ">=1.0.0",
    "mongoose": ">=3.0.0",
    "nodemon": "~0"
  },
  "directories": {},
  "dist": {
    "shasum": "d07066262668864c304e348b1670bc52ba25cdf3",
    "tarball": "https://registry.npmjs.org/mocha-mongoose/-/mocha-mongoose-1.2.0.tgz"
  },
  "engines": {
    "node": "*",
    "npm": ">= 1.2"
  },
  "gitHead": "2ac1a87f3d2a89088c4bcaa5506df0ec670c8c0c",
  "homepage": "https://github.com/elliotf/mocha-mongoose#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "elliotf",
      "email": "efoster+opensource@firetaco.com"
    }
  ],
  "name": "mocha-mongoose",
  "optionalDependencies": {},
  "peerDependencies": {
    "mocha": ">=1.0.0",
    "mongodb": ">=1.0.0"
  },
  "readme": "mocha-mongoose\n==============\n\nTest helpers for using mongoose with mocha.\n\nSee the example spec (copied below) for more details.\n\n[![Travis-CI Build Status](https://secure.travis-ci.org/elliotf/mocha-mongoose.png)](http://travis-ci.org/elliotf/mocha-mongoose)\n[![Drone.io Build Status](https://drone.io/github.com/elliotf/mocha-mongoose/status.png)](https://drone.io/github.com/elliotf/mocha-mongoose/latest)\n\n## Installation\n\n1. install via npm\n\n    $ npm install mocha-mongoose\n\n1. require mocha-mongoose in your spec helper (easier) or in each spec file\n\n    require('mocha-mongoose')('mongodb://your-mongodb-url-here');\n\n1. mocha-mongoose will automatically clear all of your collections before each spec run\n1. optionally provide a `skip` option to tell mocha-mongoose not to clear specific collections.\n    require('mocha-mongoose')(dbURI, { skip: ['collectionname1', 'collectionname2'] });\n\n## Example usage of automatically clearing the DB between specs:\n\nThis is a copy of example/test.js\n\n```javascript\nvar dbURI    = 'mongodb://localhost/demo-app-clearing-db'\n  , should   = require('chai').should()\n  , mongoose = require('mongoose')\n  , Dummy    = mongoose.model('Dummy', new mongoose.Schema({a:Number}))\n  , clearDB  = require('mocha-mongoose')(dbURI)\n;\n\ndescribe(\"Example spec for a model\", function() {\n  beforeEach(function(done) {\n    if (mongoose.connection.db) return done();\n\n    mongoose.connect(dbURI, done);\n  });\n\n  it(\"can be saved\", function(done) {\n    new Dummy({a: 1}).save(done);\n  });\n\n  it(\"can be listed\", function(done) {\n    new Dummy({a: 1}).save(function(err, model){\n      if (err) return done(err);\n\n      new Dummy({a: 2}).save(function(err, model){\n        if (err) return done(err);\n\n        Dummy.find({}, function(err, docs){\n          if (err) return done(err);\n\n          // without clearing the DB between specs, this would be 3\n          docs.length.should.equal(2);\n          done();\n        });\n      });\n    });\n  });\n\n  it(\"can clear the DB on demand\", function(done) {\n    new Dummy({a: 5}).save(function(err, model){\n      if (err) return done(err);\n\n      clearDB(function(err){\n        if (err) return done(err);\n\n        Dummy.find({}, function(err, docs){\n          if (err) return done(err);\n\n          console.log(docs);\n\n          docs.length.should.equal(0);\n          done();\n        });\n      });\n    });\n  });\n});\n```\n\n## Example usage of manually clearing the DB:\n\nThis is a copy of example/manual.js\n\n```javascript\nvar dbURI    = 'mongodb://localhost/demo-app-clearing-db'\n  , expect   = require('chai').expect\n  , mongoose = require('mongoose')\n  , Dummy    = mongoose.model('Dummy', new mongoose.Schema({a:Number}))\n  , clearDB  = require('mocha-mongoose')(dbURI, {noClear: true})\n;\n\ndescribe(\"Example spec for a model\", function() {\n  before(function(done) {\n    if (mongoose.connection.db) return done();\n\n    mongoose.connect(dbURI, done);\n  });\n\n  before(function(done) {\n    clearDB(done);\n  });\n\n  it(\"can be saved\", function(done) {\n    Dummy.create({a: 1}, done);\n  });\n\n  it(\"can save another\", function(done) {\n    Dummy.create({a: 2}, done);\n  });\n\n  it(\"can be listed\", function(done) {\n     Dummy.find({}, function(err, models){\n      expect(err).to.not.exist;\n      expect(models).to.have.length(2);\n\n      done();\n     });\n  });\n\n  it(\"can clear the DB on demand\", function(done) {\n    Dummy.count(function(err, count){\n      expect(err).to.not.exist;\n      expect(count).to.equal(2);\n\n      clearDB(function(err){\n        expect(err).to.not.exist;\n\n        Dummy.find({}, function(err, docs){\n          expect(err).to.not.exist;\n\n          expect(docs.length).to.equal(0);\n          done();\n        });\n      });\n    });\n  });\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/elliotf/mocha-mongoose.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.2.0"
}
